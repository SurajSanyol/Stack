#include <iostream>
using namespace std;

class NStack{

      int *a,*top,*next;
      int n; // no of stacks
      int size; // size of the array
      int freeSpot;

      public:

      NStack(int n,int s)
      {
        this->n =n;
        this->size =s;
        freeSpot=0;
        a = new int[size];
        top = new int[n];
        next = new int[size];

        for(int i=0;i<n;i++)
        {
          top[i]=-1;
        }

        for(int i=0;i<size;i++)
        {
          next[i]=i+1;
        }
         
         next[size-1]=-1;

      }

      // push into mth stack

      bool push(int x, int m)
      {
          if(freeSpot==-1)
          return false;

          int index= freeSpot;
          freeSpot=next[index];
          a[index]=x;
          next[index] = top[m-1];
          top[m-1]=index;

          return true;

      }

      int pop(int m)
      {
         if(top[m-1]==-1)
         return -1;


         int index = top[m-1];
         top[m-1]=next[index];
         int popElement = a[index];
         next[index]=freeSpot;
         freeSpot = index;

         return popElement;


      }

      // distructor

      ~NStack()
      {
        delete[] a;
        delete[] top;
        delete[] next;

      }


};

int main() {
  
  // cout<<"hello wordl";

  NStack s(2 , 3);
  cout<<s.push(10 ,1)<<endl;
  cout<<s.push(11 ,2)<<endl;
  cout<<s.push(12 ,2)<<endl;
  // cout<<s.push(13 ,1)<<endl;
  //   cout<<s.push(13 ,1)<<endl;


  return 0;
}

class Solution {

    vector<int> prevSmallerElem(vector<int>& input) {

        vector<int> ans(input.size());
        stack<int> st;
        st.push(-1);

        for (int i = 0; i < input.size(); i++) {
            int curr = input[i];

            while (st.top() != -1 && input[st.top()] >= curr) {
                st.pop();
            }

            ans[i] = st.top();

            st.push(i);
        }
        return ans;
    }

    vector<int> nextSmallerElem(vector<int>& input) {

        vector<int> ans(input.size());
        stack<int> st;
        st.push(-1);

        for (int i = input.size() - 1; i >= 0; i--) {
            int curr = input[i];

            while (st.top() != -1 && input[st.top()] >= curr) {
                st.pop();
            }

            ans[i] = st.top();

            st.push(i);
        }
        return ans;
    }

    int largestRectangleArea(vector<int>& heights) {

        vector<int> prev = prevSmallerElem(heights);

        vector<int> next = nextSmallerElem(heights);

        int maxArea = INT_MIN;

        for (int i = 0; i < heights.size(); i++) {

            int length = heights[i];

            // this is the attention point
            if (next[i] == -1) {
                next[i] = heights.size();
            }
            int width = next[i] - prev[i] - 1; // Here  is also need focus

            int area = length * width;

            maxArea = max(area, maxArea);
        }

        return maxArea;
    }

public:
    int maximalRectangle(vector<vector<char>>& matrix) {

        vector<vector<int>>v;
        int n = matrix.size();
        int m = matrix[0].size();

        for(int i=0;i<n;++i)
        {
            vector<int>t;
            for(int j=0;j<m;++j)
            {
                t.push_back(matrix[i][j]-'0');
            }
            v.push_back(t);
        }

        int  area = largestRectangleArea(v[0]);
        for(int i=1;i<n;++i)
        {
            for(int j=0;j<m;++j)
            {
                 if(v[i][j])
                 {
                 v[i][j]+=v[i-1][j];

                 }
                 else {
                    v[i][j]=0;
                 }
            }
            area = max(area,largestRectangleArea(v[i]));
        }
         return area;
    }
};
